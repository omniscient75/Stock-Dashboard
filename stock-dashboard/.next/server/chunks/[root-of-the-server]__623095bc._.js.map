{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/patil/Stock-Dashboard/stock-dashboard/src/app/api/stocks/%5Bsymbol%5D/historical/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\n\r\n/**\r\n * Historical Stock Data API\r\n * \r\n * WHY this endpoint:\r\n * - Provides extended historical data for technical analysis\r\n * - Calculates 52-week high/low values from historical data\r\n * - Supports chart visualizations with different time ranges\r\n * - Enables technical indicator calculations\r\n * \r\n * FEATURES:\r\n * - 1-year historical data (365 days)\r\n * - 52-week high/low calculations\r\n * - Daily OHLCV data\r\n * - Support for different time periods\r\n */\r\n\r\ninterface HistoricalDataPoint {\r\n  date: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n}\r\n\r\ninterface HistoricalResponse {\r\n  symbol: string;\r\n  companyName: string;\r\n  currentPrice: number;\r\n  currentChange: number;\r\n  currentChangePercent: number;\r\n  week52High: number;\r\n  week52Low: number;\r\n  week52HighDate: string;\r\n  week52LowDate: string;\r\n  historicalData: HistoricalDataPoint[];\r\n  dataPoints: number;\r\n  period: string;\r\n}\r\n\r\n// Company data for mock generation\r\nconst companies = {\r\n  'RELIANCE': { \r\n    basePrice: 2500, \r\n    volatility: 0.025, \r\n    avgVolume: 5000000,\r\n    name: 'Reliance Industries Ltd'\r\n  },\r\n  'TCS': { \r\n    basePrice: 3500, \r\n    volatility: 0.020, \r\n    avgVolume: 3000000,\r\n    name: 'Tata Consultancy Services Ltd'\r\n  },\r\n  'HDFCBANK': { \r\n    basePrice: 1500, \r\n    volatility: 0.030, \r\n    avgVolume: 4000000,\r\n    name: 'HDFC Bank Ltd'\r\n  },\r\n  'INFY': { \r\n    basePrice: 1400, \r\n    volatility: 0.022, \r\n    avgVolume: 3500000,\r\n    name: 'Infosys Ltd'\r\n  },\r\n  'ICICIBANK': { \r\n    basePrice: 900, \r\n    volatility: 0.035, \r\n    avgVolume: 4500000,\r\n    name: 'ICICI Bank Ltd'\r\n  },\r\n  'HINDUNILVR': { \r\n    basePrice: 2200, \r\n    volatility: 0.018, \r\n    avgVolume: 2000000,\r\n    name: 'Hindustan Unilever Ltd'\r\n  },\r\n  'ITC': { \r\n    basePrice: 400, \r\n    volatility: 0.020, \r\n    avgVolume: 15000000,\r\n    name: 'ITC Ltd'\r\n  },\r\n  'SBIN': { \r\n    basePrice: 650, \r\n    volatility: 0.026, \r\n    avgVolume: 20000000,\r\n    name: 'State Bank of India'\r\n  },\r\n};\r\n\r\n/**\r\n * Generate realistic historical stock data\r\n * WHY this approach:\r\n * - Creates consistent data patterns for testing\r\n * - Simulates real market volatility and trends\r\n * - Provides enough data for 52-week calculations\r\n * - Maintains OHLCV relationships\r\n */\r\nfunction generateHistoricalData(symbol: string, days: number = 365): HistoricalDataPoint[] {\r\n  const company = companies[symbol as keyof typeof companies];\r\n  if (!company) {\r\n    throw new Error(`Company not found: ${symbol}`);\r\n  }\r\n\r\n  const data: HistoricalDataPoint[] = [];\r\n  let currentPrice = company.basePrice;\r\n  \r\n  // Add some trend to make data more realistic\r\n  let trend = 0;\r\n  const trendChange = 0.001; // Small trend change per day\r\n  \r\n  const start = new Date();\r\n  start.setDate(start.getDate() - days);\r\n  \r\n  for (let i = 0; i < days; i++) {\r\n    const currentDate = new Date(start);\r\n    currentDate.setDate(start.getDate() + i);\r\n    \r\n    // Skip weekends\r\n    if (currentDate.getDay() === 0 || currentDate.getDay() === 6) {\r\n      continue;\r\n    }\r\n    \r\n    // Update trend (random walk)\r\n    trend += (Math.random() - 0.5) * trendChange;\r\n    trend = Math.max(-0.01, Math.min(0.01, trend)); // Limit trend\r\n    \r\n    // Generate price movement with trend\r\n    const change = (Math.random() - 0.5) * company.volatility * 2 + trend;\r\n    const open = currentPrice * (1 + (Math.random() - 0.5) * company.volatility);\r\n    const close = currentPrice * (1 + change);\r\n    const high = Math.max(open, close) * (1 + Math.random() * company.volatility);\r\n    const low = Math.min(open, close) * (1 - Math.random() * company.volatility);\r\n    const volume = company.avgVolume * (0.5 + Math.random());\r\n    \r\n    const dateString = currentDate.toISOString().split('T')[0];\r\n    data.push({\r\n      date: dateString,\r\n      open: Math.max(0.01, open),\r\n      high: Math.max(open, close, high),\r\n      low: Math.min(open, close, low),\r\n      close: Math.max(0.01, close),\r\n      volume: Math.max(1000, Math.round(volume)),\r\n    });\r\n    \r\n    currentPrice = close;\r\n  }\r\n  \r\n  return data;\r\n}\r\n\r\n/**\r\n * Calculate 52-week high/low from historical data\r\n * WHY these calculations:\r\n * - 52-week high/low are key technical indicators\r\n * - Help investors understand stock performance over a year\r\n * - Used for support/resistance analysis\r\n * - Important for risk assessment\r\n */\r\nfunction calculate52WeekStats(historicalData: HistoricalDataPoint[]): {\r\n  week52High: number;\r\n  week52Low: number;\r\n  week52HighDate: string;\r\n  week52LowDate: string;\r\n} {\r\n  if (historicalData.length === 0) {\r\n    throw new Error('No historical data provided');\r\n  }\r\n\r\n  let week52High = historicalData[0].high;\r\n  let week52Low = historicalData[0].low;\r\n  let week52HighDate = historicalData[0].date;\r\n  let week52LowDate = historicalData[0].date;\r\n\r\n  for (const dataPoint of historicalData) {\r\n    if (dataPoint.high > week52High) {\r\n      week52High = dataPoint.high;\r\n      week52HighDate = dataPoint.date;\r\n    }\r\n    if (dataPoint.low < week52Low) {\r\n      week52Low = dataPoint.low;\r\n      week52LowDate = dataPoint.date;\r\n    }\r\n  }\r\n\r\n  return {\r\n    week52High,\r\n    week52Low,\r\n    week52HighDate,\r\n    week52LowDate,\r\n  };\r\n}\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  { params }: { params: { symbol: string } }\r\n) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const symbol = params.symbol?.toUpperCase();\r\n    const period = searchParams.get('period') || '1y'; // 1y, 6m, 3m, 1m\r\n    \r\n    // Validate symbol\r\n    if (!symbol || !companies[symbol as keyof typeof companies]) {\r\n      return NextResponse.json(\r\n        { error: 'Invalid or unsupported stock symbol' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Determine number of days based on period\r\n    const daysMap: { [key: string]: number } = {\r\n      '1m': 30,\r\n      '3m': 90,\r\n      '6m': 180,\r\n      '1y': 365,\r\n    };\r\n    \r\n    const days = daysMap[period] || 365;\r\n    const company = companies[symbol as keyof typeof companies];\r\n\r\n    // Generate historical data\r\n    const historicalData = generateHistoricalData(symbol, days);\r\n    \r\n    // Calculate 52-week stats (always use 365 days for 52-week calculations)\r\n    const fullYearData = generateHistoricalData(symbol, 365);\r\n    const week52Stats = calculate52WeekStats(fullYearData);\r\n    \r\n    // Get current price (latest close)\r\n    const currentPrice = historicalData[historicalData.length - 1].close;\r\n    const previousPrice = historicalData[historicalData.length - 2]?.close || currentPrice;\r\n    const currentChange = currentPrice - previousPrice;\r\n    const currentChangePercent = (currentChange / previousPrice) * 100;\r\n\r\n    const response: HistoricalResponse = {\r\n      symbol,\r\n      companyName: company.name,\r\n      currentPrice,\r\n      currentChange,\r\n      currentChangePercent,\r\n      week52High: week52Stats.week52High,\r\n      week52Low: week52Stats.week52Low,\r\n      week52HighDate: week52Stats.week52HighDate,\r\n      week52LowDate: week52Stats.week52LowDate,\r\n      historicalData,\r\n      dataPoints: historicalData.length,\r\n      period,\r\n    };\r\n\r\n    return NextResponse.json(response);\r\n    \r\n  } catch (error) {\r\n    console.error('Historical data API error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch historical data' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}