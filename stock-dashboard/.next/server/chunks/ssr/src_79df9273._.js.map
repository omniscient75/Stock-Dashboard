{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/patil/Stock-Dashboard/stock-dashboard/src/components/charts/StockLineChart.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useMemo, useRef, useEffect } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartOptions,\r\n  ChartData,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { format } from 'date-fns';\r\nimport { HistoricalData } from '@/types/stock';\r\n\r\n// Register Chart.js components we need\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\ninterface StockLineChartProps {\r\n  data: HistoricalData[];\r\n  title?: string;\r\n  height?: number;\r\n  showLegend?: boolean;\r\n  loading?: boolean;\r\n  error?: string | null;\r\n}\r\n\r\n/**\r\n * StockLineChart Component\r\n * \r\n * WHY this component structure:\r\n * - 'use client' directive is required for Chart.js in Next.js 13+ app router\r\n * - useMemo prevents unnecessary chart re-renders when props haven't changed\r\n * - useRef helps with chart instance management and cleanup\r\n * - Chart.js registration happens once at module level for performance\r\n */\r\nexport const StockLineChart: React.FC<StockLineChartProps> = ({\r\n  data,\r\n  title = 'Stock Price',\r\n  height = 400,\r\n  showLegend = true,\r\n  loading = false,\r\n  error = null,\r\n}) => {\r\n  const chartRef = useRef<ChartJS>(null);\r\n\r\n  // Memoize chart data to prevent unnecessary re-renders\r\n  const chartData: ChartData<'line'> = useMemo(() => {\r\n    if (!data || data.length === 0) {\r\n      return {\r\n        labels: [],\r\n        datasets: [],\r\n      };\r\n    }\r\n\r\n    // Sort data by date to ensure proper time sequence\r\n    const sortedData = [...data].sort((a, b) => \r\n      new Date(a.date).getTime() - new Date(b.date).getTime()\r\n    );\r\n\r\n    return {\r\n      labels: sortedData.map(item => format(new Date(item.date), 'MMM dd')),\r\n      datasets: [\r\n        {\r\n          label: 'Close Price',\r\n          data: sortedData.map(item => Number(item.close)),\r\n          borderColor: 'rgb(59, 130, 246)', // Blue color\r\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\r\n          borderWidth: 2,\r\n          fill: false,\r\n          tension: 0.1, // Slight curve for smoother appearance\r\n          pointRadius: 0, // Hide points by default for cleaner look\r\n          pointHoverRadius: 6, // Show points on hover\r\n          pointHoverBackgroundColor: 'rgb(59, 130, 246)',\r\n          pointHoverBorderColor: '#fff',\r\n          pointHoverBorderWidth: 2,\r\n        },\r\n      ],\r\n    };\r\n  }, [data]);\r\n\r\n  // Chart configuration options\r\n  const options: ChartOptions<'line'> = useMemo(() => ({\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        display: showLegend,\r\n        position: 'top' as const,\r\n        labels: {\r\n          usePointStyle: true,\r\n          padding: 20,\r\n          font: {\r\n            size: 12,\r\n            family: 'Inter, sans-serif',\r\n          },\r\n        },\r\n      },\r\n      title: {\r\n        display: !!title,\r\n        text: title,\r\n        font: {\r\n          size: 16,\r\n          weight: 'bold',\r\n          family: 'Inter, sans-serif',\r\n        },\r\n        padding: {\r\n          top: 10,\r\n          bottom: 20,\r\n        },\r\n      },\r\n      tooltip: {\r\n        mode: 'index' as const,\r\n        intersect: false,\r\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: 'rgba(255, 255, 255, 0.1)',\r\n        borderWidth: 1,\r\n        cornerRadius: 8,\r\n        displayColors: true,\r\n        callbacks: {\r\n          title: (context) => {\r\n            const dataIndex = context[0].dataIndex;\r\n            const date = data[dataIndex]?.date;\r\n            return date ? format(new Date(date), 'MMM dd, yyyy') : '';\r\n          },\r\n          label: (context) => {\r\n            const value = context.parsed.y;\r\n            return `${context.dataset.label}: ‚Çπ${value.toFixed(2)}`;\r\n          },\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        display: true,\r\n        title: {\r\n          display: false,\r\n        },\r\n        grid: {\r\n          display: false, // Hide vertical grid lines\r\n        },\r\n        ticks: {\r\n          maxTicksLimit: 8, // Limit number of x-axis labels for readability\r\n          font: {\r\n            size: 11,\r\n            family: 'Inter, sans-serif',\r\n          },\r\n          color: '#6b7280',\r\n        },\r\n      },\r\n      y: {\r\n        display: true,\r\n        title: {\r\n          display: false,\r\n        },\r\n        grid: {\r\n          color: 'rgba(0, 0, 0, 0.1)',\r\n          drawBorder: false,\r\n        },\r\n        ticks: {\r\n          font: {\r\n            size: 11,\r\n            family: 'Inter, sans-serif',\r\n          },\r\n          color: '#6b7280',\r\n          callback: (value) => `‚Çπ${Number(value).toFixed(0)}`,\r\n        },\r\n      },\r\n    },\r\n    interaction: {\r\n      mode: 'nearest' as const,\r\n      axis: 'x' as const,\r\n      intersect: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        hoverRadius: 6,\r\n      },\r\n    },\r\n  }), [title, showLegend, data]);\r\n\r\n  // Cleanup chart instance on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (chartRef.current) {\r\n        chartRef.current.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Loading state\r\n  if (loading) {\r\n    return (\r\n      <div \r\n        className=\"flex items-center justify-center bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\"\r\n        style={{ height }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-2\"></div>\r\n          <p className=\"text-gray-500 dark:text-gray-400 text-sm\">Loading chart...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Error state\r\n  if (error) {\r\n    return (\r\n      <div \r\n        className=\"flex items-center justify-center bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\"\r\n        style={{ height }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <div className=\"text-red-500 text-2xl mb-2\">‚ö†Ô∏è</div>\r\n          <p className=\"text-red-600 dark:text-red-400 text-sm\">{error}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Empty data state\r\n  if (!data || data.length === 0) {\r\n    return (\r\n      <div \r\n        className=\"flex items-center justify-center bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\"\r\n        style={{ height }}\r\n      >\r\n        <div className=\"text-center\">\r\n          <div className=\"text-gray-400 text-2xl mb-2\">üìä</div>\r\n          <p className=\"text-gray-500 dark:text-gray-400 text-sm\">No data available</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4\"\r\n      style={{ height }}\r\n    >\r\n      <Line \r\n        ref={chartRef}\r\n        data={chartData} \r\n        options={options}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 307, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/patil/Stock-Dashboard/stock-dashboard/src/components/charts/index.ts"],"sourcesContent":["// Chart Components Export\r\nexport { StockLineChart } from './StockLineChart';\r\n"],"names":[],"mappings":"AAAA,0BAA0B;;AAC1B","debugId":null}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/patil/Stock-Dashboard/stock-dashboard/src/app/charts-demo/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { StockLineChart } from '@/components/charts';\nimport { HistoricalData } from '@/types/stock';\n\n/**\n * Charts Demo Page - Completely Safe Version\n * \n * WHY this demo page:\n * - Shows all chart components in action with realistic data\n * - Demonstrates different chart types and configurations\n * - Provides interactive examples for learning and testing\n * - Completely self-contained with no external dependencies\n */\nexport default function ChartsDemoPage() {\n  const [chartData, setChartData] = useState<HistoricalData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCompany, setSelectedCompany] = useState<string>('RELIANCE');\n  const [error, setError] = useState<string | null>(null);\n\n  // Completely self-contained data generation\n  const generateChartData = (symbol: string, days: number = 30): HistoricalData[] => {\n    console.log('üîç generateChartData called with:', { symbol, days });\n    \n    // Safe type checking\n    if (!symbol || typeof symbol !== 'string') {\n      console.error('‚ùå Invalid symbol:', symbol);\n      return [];\n    }\n    \n    const upperSymbol = symbol.trim().toUpperCase();\n    console.log('‚úÖ Processing symbol:', upperSymbol);\n    \n    // Company data - completely self-contained\n    const companies = {\n      'RELIANCE': { basePrice: 2500, volatility: 0.025, avgVolume: 5000000 },\n      'TCS': { basePrice: 3500, volatility: 0.020, avgVolume: 3000000 },\n      'HDFCBANK': { basePrice: 1500, volatility: 0.030, avgVolume: 4000000 },\n      'INFY': { basePrice: 1400, volatility: 0.022, avgVolume: 3500000 },\n      'ICICIBANK': { basePrice: 900, volatility: 0.035, avgVolume: 4500000 },\n    };\n    \n    const company = companies[upperSymbol as keyof typeof companies];\n    if (!company) {\n      console.warn('‚ö†Ô∏è Company not found:', upperSymbol);\n      return [];\n    }\n    \n    console.log('‚úÖ Generating data for:', upperSymbol, company);\n    \n    // Generate data\n    const data: HistoricalData[] = [];\n    let currentPrice = company.basePrice;\n    \n    const start = new Date();\n    start.setDate(start.getDate() - days);\n    \n    for (let i = 0; i < days; i++) {\n      const currentDate = new Date(start);\n      currentDate.setDate(start.getDate() + i);\n      \n      // Skip weekends\n      if (currentDate.getDay() === 0 || currentDate.getDay() === 6) {\n        continue;\n      }\n      \n      // Generate price movement\n      const change = (Math.random() - 0.5) * company.volatility * 2;\n      const open = currentPrice * (1 + (Math.random() - 0.5) * company.volatility);\n      const close = currentPrice * (1 + change);\n      const high = Math.max(open, close) * (1 + Math.random() * company.volatility);\n      const low = Math.min(open, close) * (1 - Math.random() * company.volatility);\n      const volume = company.avgVolume * (0.5 + Math.random());\n      \n      const dateString = currentDate.toISOString().split('T')[0];\n      data.push({\n        date: dateString,\n        open: Math.max(0.01, open),\n        high: Math.max(open, close, high),\n        low: Math.min(open, close, low),\n        close: Math.max(0.01, close),\n        volume: Math.max(1000, Math.round(volume)),\n      });\n      \n      currentPrice = close;\n    }\n    \n    console.log('‚úÖ Generated', data.length, 'data points');\n    return data;\n  };\n\n  // Generate mock data for demonstration\n  useEffect(() => {\n    const generateData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        console.log('üîç ChartsDemoPage: Starting data generation');\n        console.log('üìä Current selectedCompany:', {\n          selectedCompany,\n          type: typeof selectedCompany,\n          isString: typeof selectedCompany === 'string'\n        });\n\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 1000));\n\n        // Type guard 1: Ensure selectedCompany is a string\n        if (typeof selectedCompany !== 'string') {\n          console.error('‚ùå ChartsDemoPage: selectedCompany is not a string:', {\n            selectedCompany,\n            type: typeof selectedCompany\n          });\n          throw new Error('Invalid company symbol: not a string');\n        }\n\n        // Type guard 2: Ensure selectedCompany is not empty\n        if (selectedCompany.trim().length === 0) {\n          console.error('‚ùå ChartsDemoPage: selectedCompany is empty');\n          throw new Error('Invalid company symbol: empty string');\n        }\n        \n        const companySymbol = selectedCompany.trim().toUpperCase();\n        console.log('‚úÖ ChartsDemoPage: Using company symbol:', companySymbol);\n\n        // Generate data using self-contained function\n        console.log('üîç ChartsDemoPage: Calling generateChartData');\n        const chartData = generateChartData(companySymbol, 30);\n\n        if (!chartData || chartData.length === 0) {\n          console.error('‚ùå ChartsDemoPage: No data generated for company:', companySymbol);\n          throw new Error(`No data generated for ${companySymbol}`);\n        }\n\n        console.log('‚úÖ ChartsDemoPage: Successfully generated data:', {\n          company: companySymbol,\n          dataPoints: chartData.length,\n          firstDate: chartData[0]?.date || 'N/A',\n          lastDate: chartData[chartData.length - 1]?.date || 'N/A'\n        });\n\n        setChartData(chartData);\n      } catch (err) {\n        console.error('‚ùå ChartsDemoPage: Error generating data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to generate chart data. Please try again.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    generateData();\n  }, [selectedCompany]);\n\n  // Company options for demo\n  const companies = [\n    { symbol: 'RELIANCE', name: 'Reliance Industries Ltd' },\n    { symbol: 'TCS', name: 'Tata Consultancy Services Ltd' },\n    { symbol: 'HDFCBANK', name: 'HDFC Bank Ltd' },\n    { symbol: 'INFY', name: 'Infosys Ltd' },\n    { symbol: 'ICICIBANK', name: 'ICICI Bank Ltd' },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                Stock Charts Demo\n              </h1>\n              <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n                Interactive stock charts built with Chart.js and React\n              </p>\n            </div>\n            \n            {/* Company Selector */}\n            <div className=\"mt-4 sm:mt-0\">\n              <label htmlFor=\"company-select\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Select Company:\n              </label>\n              <select\n                id=\"company-select\"\n                value={selectedCompany}\n                onChange={(e) => setSelectedCompany(e.target.value)}\n                className=\"block w-full sm:w-auto px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n              >\n                {companies.map((company) => (\n                  <option key={company.symbol} value={company.symbol}>\n                    {company.symbol} - {company.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Chart Dashboard */}\n        <div className=\"mb-8\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-4\">\n              {selectedCompany} - {companies.find(c => c.symbol === selectedCompany)?.name}\n            </h2>\n            \n            <StockLineChart\n              data={chartData}\n              title={`${selectedCompany} Price Chart`}\n              height={400}\n              loading={loading}\n              error={error}\n            />\n          </div>\n        </div>\n\n       \n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}